---
title: "Day 1 Part 1: Analysis with Tidyverse"
subtitle: "Zero to Hero Bootcamp - Time Series Econometrics in R"
author: "Dr Christian Engels"
date: "16 November 2024"
published-title: "Last updated"
# format: 
#   html:
#     toc: true
#     toc-location: right-body
#     toc-depth: 2
#     toc-title: "Contents"
#     html-math-method: katex
#     theme: flatly
#     number-sections: false
#     self-contained: true
#     title-block-banner: true
---

## Load Libraries

Load necessary libraries for data manipulation, finance data, and time-series analysis. These libraries are essential for handling, transforming, and analyzing time series data, providing tools for visualization, statistical analysis, and econometric modeling.

```{r, message=FALSE}
library(tidyverse)
library(tidyfinance)
library(tsibble)
library(fable)
```

## Download Data

Download and print data from FRED for selected series: GDP and CPIAUCNS (Consumer Price Index). The Federal Reserve Economic Data (FRED) repository provides a rich source of economic time series data, which we can use to perform exploratory analysis and model economic trends.

```{r, warning=FALSE}
fred <- download_data("fred", series = c("GDP", "CPIAUCNS"))
fred
```

## Print and View Data

Print the data and view it in the viewer for a detailed look. Viewing the data in this manner allows us to understand the structure and content of the dataset, which is helpful for planning further analysis steps.

```{r}
View(fred)

fred %>% View
```

## Summary of Data

Display a summary glimpse of the FRED data. A quick overview of the dataset's variables helps verify data types, spot missing values, and understand the overall data structure.

```{r}
fred %>% glimpse()
```

## Filter for CPIAUCNS Series

Filter the FRED data to show only the CPIAUCNS series. Filtering for the Consumer Price Index series allows us to focus on inflation data, which is an important economic indicator for understanding price stability.

```{r}
fred %>% filter(series == "CPIAUCNS")
```

## Summary Statistics for CPIAUCNS

Calculate the earliest date, latest date, and mean value for the CPIAUCNS series. These summary statistics provide insights into the temporal coverage of the data and the average level of consumer prices over the observed period.

```{r}
fred %>% 
  filter(series == "CPIAUCNS") %>% 
  summarise(
    min(date), 
    max(date), 
    mean(value)
  )
```

Provide an enhanced summary of CPIAUCNS with labeled output for minimum and maximum dates, and mean value. This labeled summary helps in clearly interpreting the results, which is useful for documentation and reporting.

```{r}
fred %>% 
  filter(series == "CPIAUCNS") %>% 
  summarise(
    date_min = min(date),
    date_max = max(date),
    value_mean = mean(value)
  )
```

## Summary for All Series

Summarize minimum and maximum dates, and mean value for each series in the FRED data. Summarizing each series individually allows us to compare the temporal coverage and mean values, providing a comparative snapshot of the key metrics for GDP and CPI.

```{r}
fred %>% 
  group_by(series) %>% 
  summarise(
    date_min = min(date),
    date_max = max(date),
    value_mean = mean(value)
  )
```

## Yearly Mean Value

Calculate the yearly mean value for each series in the FRED data. Calculating yearly means helps smooth out short-term fluctuations and reveal longer-term trends, which is important for econometric modeling.

```{r}
fred %>% 
  group_by(series, year = year(date)) %>% 
  summarise(value_mean = mean(value))
```

## Pivot Yearly Mean Data

Pivot the yearly mean data to show each series as a column for easier comparison. Pivoting the data allows us to easily compare trends across different economic indicators, making it more efficient to analyze relationships between GDP and CPI.

```{r}
fred %>% 
  group_by(series, year = year(date)) %>% 
  summarise(value_mean = mean(value)) %>% 
  pivot_wider(
    id_cols = year,
    names_from = series,
    values_from = value_mean
  )
```

## Summarize and Reshape Yearly Data

Summarize and reshape the data to show yearly averages for each series, then pivot to make each series a column and remove any missing data. Removing missing values after reshaping ensures a clean dataset, which is crucial for accurate analysis and avoids issues during statistical modeling.

```{r}
fred_yearly <- 
  fred %>% 
  group_by(series, year = year(date)) %>% 
  summarise(value_mean = mean(value)) %>% 
  pivot_wider(
    id_cols = year,
    names_from = series,
    values_from = value_mean
  ) %>% 
  remove_missing()

fred_yearly
```

## Inspect GDP Data

Select and inspect the GDP data, organizing it by year. Inspecting GDP specifically allows us to focus on this key economic indicator, preparing it for further analysis such as trend examination and forecasting.

```{r}
GDP <- 
  fred_yearly %>% 
  select(year, GDP) %>% 
  glimpse()
```

## Plot GDP Over Time

Convert GDP data to a time-series format and plot it over time. Visualizing GDP over time allows us to identify potential trends, cycles, or structural breaks, which is an important preliminary step before formal econometric modeling.

```{r}
GDP %>% 
  as_tsibble(index=year) %>% 
  autoplot(.vars=GDP)
```

## Logarithmic GDP Analysis

Convert GDP data to a time-series format, add a column with the log of GDP, and plot the logarithmic GDP over time to analyze growth trends. Taking the logarithm of GDP helps linearize exponential growth patterns, making it easier to interpret percentage changes and apply econometric models that assume linear relationships.

```{r}
GDP %>% 
  as_tsibble(index=year) %>% 
  mutate(log_GDP = log(GDP)) %>% 
  autoplot(.vars = log_GDP)
```

## Exercises

In this exercise, you will download data from FRED and inspect it.

1. Visit [FRED Economic Data St. Louis FED](https://fred.stlouisfed.org)
2. Identify a time series that interests you and download it using the `data_download` function (e.g., `MSPUS` [here](https://fred.stlouisfed.org/series/MSPUS))
3. Plot the time series and aggregate it to the yearly frequency using at least three of the [useful summarise functions in dplyr](https://dplyr.tidyverse.org/reference/summarise.html#useful-functions)

Throughout, use the `print`, `glimpse` and `View` functions to keep track of your data.